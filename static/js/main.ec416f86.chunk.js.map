{"version":3,"sources":["BooksAPI.js","components/Book.js","components/Search.js","components/Shelf.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Books","state","selected","currentShelf","handleChange","e","BooksAPI","target","value","_this","props","removeBook","setState","this","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","disabled","title","authors","map","author","index","length","Component","Search","shelvedBooks","fetchBooks","componentDidUpdate","prevProps","prevState","response","push","_this2","Link","to","onClick","handleClick","type","placeholder","shelfCheck","filter","key","Book","Shelf","shelfName","BooksApp","currentlyReading","wantToRead","read","updated","bookObj","bookId","bookShelf","newObj","assign","componentDidMount","keys","setTimeout","_this3","Route","exact","path","render","components_Shelf","components_Search","bind","React","ReactDOM","BrowserRouter","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ec416f86.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\r\nimport * as BooksAPI from '../BooksAPI';\r\n\r\nclass Books extends Component {\r\n\r\n    state = {\r\n        selected: '',\r\n        currentShelf: '',\r\n    }\r\n\r\n    // Removes book from shelf and triggers a render\r\n    handleChange = (e) => {\r\n        BooksAPI.update({id: e.target.id}, e.target.value);\r\n        if (this.state.selected !== 'none') {\r\n            this.props.removeBook(e.target.id, this.state.selected);\r\n        }\r\n\r\n        this.setState({ currentShelf: e.target.value })\r\n    }\r\n\r\n    // because we cannot use defaultValue in a controlled component\r\n    componentDidMount() {\r\n        this.setState({ \r\n            selected: this.props.book.shelf,  \r\n            currentShelf: this.props.shelf\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { book } = this.props;\r\n        const { currentShelf } = this.state;\r\n        \r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                {/* backGroundImage can be blank, in that case we use a placeholder */}\r\n                    <div className=\"book-cover\" style={{ \r\n                        width: 128, \r\n                        height: 193, \r\n                        backgroundImage: `${book.imageLinks ? `url(${book.imageLinks.thumbnail})` : `url(https://books.google.com/books/content?id=1&printsec=frontcover&img=1&zoom=1&source=gbs_api)`}` }}>\r\n                    </div>\r\n                    <div className=\"book-shelf-changer\">\r\n                    <select \r\n                        id={book.id} \r\n                        onChange={this.handleChange} \r\n                        value={currentShelf}\r\n                        >\r\n\r\n                        <option value=\"move\" disabled>Move to...</option>\r\n                        <option value=\"currentlyReading\" disabled={currentShelf === 'currentlyReading'}>Currently Reading</option>\r\n                        <option value=\"wantToRead\" disabled={currentShelf === 'wantToRead'}>Want to Read</option>\r\n                        <option value=\"read\" disabled={currentShelf === 'read'}>Read</option>\r\n                        <option value=\"none\" disabled={currentShelf === 'none'}>None</option>\r\n                    </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{book.title}</div>\r\n                <div className=\"book-authors\">{book.authors && (\r\n                    book.authors.map((author, index) => {\r\n                        /* Handles multiple authors\r\n                            & lack of authors */\r\n                        return (book.authors.length !== index+1) ? `${author}, ` : author;\r\n                    })\r\n                )}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Books;","import React, { Component } from 'react';\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport Book from './Book';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        query: '',\r\n        books: [],\r\n        shelvedBooks: []\r\n    }\r\n\r\n    // Only search if at least 2 letters are present in query\r\n    fetchBooks = (query) => {\r\n        if (query.length < 2) {\r\n            this.setState({ books: [] });\r\n        } else {\r\n            BooksAPI.search(query).then(books => {\r\n                this.setState({ books: books })\r\n            })\r\n        }\r\n    }\r\n\r\n    // Controls search form value\r\n    handleChange = (e) => {\r\n        this.setState({ query: e.target.value });\r\n    }\r\n\r\n    // Grabs user's books and saves them to state\r\n    componentDidMount() {\r\n        let books = [] \r\n        BooksAPI.getAll().then(response => {\r\n            response.map(book => books.push({id: book.id, shelf: book.shelf}))\r\n        })\r\n        this.setState({ shelvedBooks: books })\r\n    }\r\n\r\n    // Fetches each time form query changes (each time letter is added or removed)\r\n    componentDidUpdate = (prevProps, prevState) => {\r\n        if (prevState.query !== this.state.query) {\r\n            this.fetchBooks(this.state.query);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to='/' className=\"close-search\" onClick={this.props.handleClick}>Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Search by title or author\" \r\n                            onChange={this.handleChange}\r\n                            value={this.state.query}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                    {/* Generates books if this.state.books exists and is not empty */}\r\n                        {this.state.books && this.state.books[0] && (\r\n                            this.state.books.map(book => {\r\n                                let shelfCheck = this.state.shelvedBooks.filter(a => a.id === book.id)\r\n                                book.shelf='none';\r\n                                return <li key={book.id}>\r\n                                    <Book \r\n                                        book={book}\r\n                                        shelf={shelfCheck[0] ? shelfCheck[0].shelf : 'none'}\r\n                                    />\r\n                                </li>\r\n                            })\r\n                        )}\r\n                    </ol>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\nimport Book from './Book';\r\n\r\n\r\n\r\nconst Shelf = (props) => {\r\n\r\n    const { books, shelfName, removeBook } = props;\r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{shelfName}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {books.map(book => (\r\n                        <li key={book.id}>\r\n                            <Book book={book} removeBook={removeBook} />\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shelf;","import React from 'react'\nimport * as BooksAPI from '../BooksAPI'\nimport './App.css'\nimport Search from './Search';\nimport Shelf from './Shelf';\nimport { Route, Link } from 'react-router-dom';\n\nclass BooksApp extends React.Component {\n\n  state = {\n    books: {\n      currentlyReading: [],\n      wantToRead: [],\n      read: []\n    },\n    updated: false,\n  }\n\n  // Fetches books and separates by shelf using .map\n  fetchBooks = () => {\n    BooksAPI.getAll().then(books => {\n      let bookObj = {\n        currentlyReading: [],\n        wantToRead: [],\n        read: []\n      };\n\n      books.map((book) => bookObj[book.shelf].push(book))\n\n      this.setState({ books: bookObj })\n    })\n  }\n\n  // Removes book from state\n  removeBook = (bookId, bookShelf) => {\n    let newObj = {};\n    Object.assign(newObj, this.state.books);\n    newObj[bookShelf] = this.state.books[bookShelf].filter(book => book.id !== bookId)\n    this.setState({ books: newObj, updated: true })\n  }\n\n  // For <Link /> on search page, to refresh books\n  handleClick() {\n    this.fetchBooks();\n  }\n\n  // Fetch books on itial page load\n  componentDidMount = () => {\n    this.fetchBooks();\n  }\n\n  // Controls updating of book shelves on main page\n  componentDidUpdate() {\n    if (this.state.updated && Object.keys(this.state.books).length) {\n      this.setState({ updated: false })\n      setTimeout(() => this.fetchBooks(), 500)\n    }\n  }\n  \n  render() {\n\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n              <div>\n              {/*Each shelf component gets it's own filtered books*/}               \n                <Shelf \n                  shelfName={'Currently Reading'}\n                  books={this.state.books.currentlyReading} \n                  removeBook={this.removeBook}\n                />\n  \n                <Shelf \n                  shelfName={'Want to Read'}\n                  books={this.state.books.wantToRead} \n                  removeBook={this.removeBook}\n                />\n  \n                <Shelf \n                  shelfName={'Read'}\n                  books={this.state.books.read} \n                  removeBook={this.removeBook}\n                />\n              </div>\n            </div>\n            <div className=\"open-search\">\n              <Link to='/search'>Add a Book</Link>\n            </div>\n          </div>\n        )}/>\n        <Route exact path='/search' render={() => <Search handleClick={this.handleClick.bind(this)}/>} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter><App /></BrowserRouter>\n, document.getElementById('root'))\n"],"sourceRoot":""}